//import flow files
import( "OriginalShortcutFuncs.flow" );
import( "Utilities.flow" );
//import msg files
import( "ModMenu.msg" );
//global variables
global int gFieldMajor;
global int gFieldMinor;
global int gEventMajor;
global int gEventMinor;
global int unitId;

void ModMenuInit()
{
	int selection = MSG_SELECT( ModMenuName, ModMenu, 0 );
	switch ( selection )
	{
		case 0://Use original square function
			SquareVanilla();
			DisplayMessagePrompt( NotImplemented );
			return;
		case 1://Player
			PlayerEditorDisplay();
			return;
		case 2://Battle Select
			BattleSelect();
			return;
		case 3://Sound Test
			BGMSelect();
			return;
		case 4://Field Select
			FieldSelect();
			return;
		case 5://Next Page
			ModMenuPage2();
			return;
		case 6://Cancel
			return;
	}
}

void ModMenuPage2()
{
	int selection = MSG_SELECT( ModMenuName, ModMenu2, 0 );
	switch ( selection )
	{
		case 0://Event Select
			EventSelect();
			return;
		case 1://Flags
			FlagsEditorDisplay();
			return;
		case 2://Font Test
			DisplayMessagePrompt( FontTest );
			return;
		case 3://About
			DisplayMessagePrompt( AboutMsg );
			return;
		case 4://Quick tests
			int category = SelectNumberPrompt( EncounterPrompt, 3 );
			FUNCTION_5005( 1, GET_MSG_SELECTION( 0 ) + FUNCTION_5004( 1536 + 87, 1 ) );
			DisplayMessagePrompt( MSGVarTest );
			//FUNCTION_003C( 11 ); //play sound effect
			return;
		case 5://Previous Page
			ModMenuInit();
			return;
		case 6://Cancel
			return;
	}
}

void PlayerEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, PlayerMenu, 0 );
	switch ( selection )
	{
		case 0://Personas
			PersonaEditorOpen();
			return;
		case 1://Social Stats
			StatEditorDisplay();
			return;
		case 2://Items
			ItemEditorDisplay();
			return;
		case 3://Set Social Link Rank
			CommuSetRankSelect();
			return;
		case 4://Set Protagonist Name
			DisplayMessagePrompt( NotImplemented );
			return;
		case 5://Max Money
			ADD_PC_MONEY( 99999999 );
			DisplayMessagePrompt( MoneyAdded );
			return;
		case 6://Cancel
			return;
	}
}

void PersonaEditorOpen()
{
	int selection = MSG_SELECT( ModMenuName, PersonaMenu, 0 );
	switch ( selection )
	{
		case 0://Add Persona
			PersonaAddSelect();
			return;
		case 1://Delete Personas
			DisplayMessagePrompt( NotImplemented );
			return;
		case 2://Add Skill
			PersonaAddSkillSelect();
			return;
		case 3://Unlock Full Compendium
			DisplayMessagePrompt( NotImplemented );
			return;
		case 4://Evolve Persona
			EvolvePersona();
			return;
		case 5://Cancel
			return;
	}
}

void PersonaAddSelect()
{
	//int personaId;
	//personaId = SelectNumberPrompt( PersonaAddPrompt, 3 ); 
	//	if ( personaId == -1 )
	//		return;
	//ADD_PERSONA_STOCK( personaId );
	//DisplayMessagePrompt( PersonaAdded );
	DisplayMessagePrompt( NotImplemented );
}

void PersonaAddSkillSelect()

	/*unitId = MSG_SELECT( ModMenuName, UnitSelect, 0 );
	int skillId = 0;
	skillId = SelectNumberPrompt( SkillPrompt, 3 );
	SKILL_ADD( ( unitId + 1 ), skillId );*/
	DisplayMessagePrompt( NotImplemented );
}

void EvolvePersona()
{
		page1:
	int selection = MSG_SELECT( ModMenuName, UnitSelect1NoProtag, 0 ) + 2;
	if ( selection <= 5 )
	{
		PERSONA_EVOLUTION( selection );
	}
	else if ( selection == 6 ) //page 2
	{
		selection = MSG_SELECT( ModMenuName, UnitSelect2NoProtag, 0 ) + 6;
		if ( selection <= 10 )
		{
			PERSONA_EVOLUTION( selection );
		}
		else if ( selection == 11 )
		{
			goto page1;
		}
	}
}

void StatEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, StatsMenu, 0 );
	int pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
	if ( pointsToAdd == 0 )
		return;
	switch ( selection )
	{
		case 0: // Academics
			ADD_PC_STAT( 0, pointsToAdd );
			return;
		case 1: // Charm
			ADD_PC_STAT( 1, pointsToAdd );
			return;
		case 2: // Courage
			ADD_PC_STAT( 2, pointsToAdd );
			return;
		case 4: // Cancel
			return;
	}
}

void ItemEditorDisplay()
{
	int itemType = MSG_SELECT( ModMenuName, ItemMenu, 0 );
	switch ( itemType ) 
	{
		case 0: // Melee Weapons
			ItemGetSelect( 0 );
			return;
		case 1: // Armor
			ItemGetSelect( 0x100 );
			return;
		case 2: // Boots
			ItemGetSelect( 0x200 );
			return;
		case 3: // Accessories
			ItemGetSelect( 0x300 );
			return;
		case 4: // Items
			ItemGetSelect( 0x400 );
			return;
		case 5: // Key Items
			ItemGetSelect( 0x500 );
			return;
		case 6: // Cancel
			return;
	}
}

void ItemGetSelect( int type )
{
	int itemId = SelectNumberPrompt( ItemPrompt, 4 );
	int amount = SelectNumberPrompt( ItemPrompt2, 2 );
	FUNCTION_5004( type + itemId, amount );
}

void CommuSetRankSelect()
{
	int cmmId = MSG_SELECT( ModMenuName, CommuCharSel1, 0 ) + 1;
	if ( cmmId <= 6 )
	{
		int lvl = Select10NumberPrompt( CommuPrompt );
		CMM_SET_LV( cmmId, lvl, 9999 );
	}
	else if ( cmmId == 7 ) //page 2
	{
		CommuSetRankSelect2();
	}
}

void CommuSetRankSelect2()
{
	int cmmId = MSG_SELECT( ModMenuName, CommuCharSel2, 0 ) + 7;
	if ( cmmId <= 11 )
	{
		int lvl = Select10NumberPrompt( CommuPrompt );
		CMM_SET_LV( cmmId, lvl, 9999 );
	}
	else if ( cmmId == 12 ) //page 1
	{
		CommuSetRankSelect();
	}
	else if ( cmmId == 13 ) //page 3
	{
		CommuSetRankSelect3();
	}

}

void CommuSetRankSelect3()
{
	int cmmId = MSG_SELECT( ModMenuName, CommuCharSel3, 0 ) + 12;
	if ( cmmId <= 16 )
	{
		int lvl = Select10NumberPrompt( CommuPrompt );
		CMM_SET_LV( cmmId, lvl, 9999 );
	}
	else if ( cmmId == 17 ) //page 2
	{
		CommuSetRankSelect2();
	}
	else if ( cmmId == 18 ) //page 4
	{
		CommuSetRankSelect4();
	}
}

void CommuSetRankSelect4()
{
	int cmmId = MSG_SELECT( ModMenuName, CommuCharSel4, 0 ) + 17;
	if ( cmmId <= 22 )
	{
		int lvl = Select10NumberPrompt( CommuPrompt );
		CMM_SET_LV( cmmId, lvl, 9999 );
	}
	else if ( cmmId == 23 ) //page 3
	{
		CommuSetRankSelect3();
	}
}

void BattleSelect()
{
	int selection = MSG_SELECT( ModMenuName, BattleTypeMenu, 0 );
	switch ( selection )
	{
		case 0://Regular Encounter
			RegularEncounter();
			return;
		case 1://Cancel
			return;
	}
}

void RegularEncounter()
{
	int Encounter = SelectNumberPrompt( EncounterPrompt, 3 );
	CALL_BATTLE( Encounter );
}

void BGMSelect()
{
	DisplayMessagePrompt( SelectBgmDialog );
	int bgmId = SelectNumber( 3 );
	BGM( bgmId );
}

void FieldSelect()
{
	int selection = MSG_SELECT( ModMenuName, FieldSelect, 0 );
	switch ( selection )
	{
		case 0://Quick Travel Select
			ShortcutSelect();
			return;
		case 1://Enter Field ID
			FieldSelectIds();
			return;
		case 2://Load Field ID
			FieldLoadSelected();
			return;
		case 3://Cancel
			return;
	}
}

void FieldSelectIds()
{
	int temp = SelectNumberPrompt( FieldDlg, 3 );
	if ( temp == -1 )
		return;
	gFieldMajor = temp;
	
	temp = SelectNumberPrompt( FieldDlg2, 3 );
	if ( temp == -1 )
		return;
	gFieldMinor = temp;
	FieldSelect();
}

void FieldLoadSelected()
{
	if (gFieldMajor == 0 && gFieldMinor == 0)
		DisplayMessagePrompt( LoadCheckError );
	else
		FADE( 3, 20 );
		FUNCTION_4001( gFieldMajor, gFieldMinor, 0, 0  );
}

void ShortcutSelect()
{
	int selection = MSG_SELECT( ModMenuName, ShortcutSelect, 0 );
	switch ( selection )
	{
		case 0://School Shortcuts
			DisplayMessagePrompt( NotImplemented );
			return;
		case 1://Dorm Shortcuts
			DisplayMessagePrompt( NotImplemented );
			return;
		case 2://Station Shortcuts
			DisplayMessagePrompt( NotImplemented );
			return;
		case 3://Kyoto Shortcuts
			FieldSelect_kyoto_shortcut();
			return;
		case 4://Cancel
			return;
	}
}

void EventSelect()
{
	int selection = MSG_SELECT( ModMenuName, EventSelect, 0 );
	switch ( selection )
	{
		case 0://Enter Event ID
			EventSelectIds();
			return;
		case 1://Load Event ID
			EventLoadSelected();
			return;
		case 2://Cancel
			return;
	}
}

void EventSelectIds()
{
	int temp = SelectNumberPrompt( EventDlg, 3 );
	if ( temp == -1 )
		return;
	gEventMajor = temp;
	
	temp = SelectNumberPrompt( EventDlg2, 3 );
	if ( temp == -1 )
		return;
		
	gEventMinor = temp;
	EventSelect();
}

void EventLoadSelected()
{
	if ( gEventMajor == 0 && gEventMinor == 0 )
	{
		DisplayMessagePrompt(LoadCheckError);
		return;
	}
	FADE( 3, 20 );
	CALL_EVENT( gEventMajor, gEventMinor );
	return;
}

void FlagsEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, FlagMenu, 0 );
	switch ( selection )
	{
		case 0://Add Party Members
			DisplayMessagePrompt( NotImplemented );
			return;
		case 1://Remove Party Members
			DisplayMessagePrompt( NotImplemented );
			return;
		case 2://Enable Party Editing
			DisplayMessagePrompt( NotImplemented );
			return;
		case 3://Manual Input
			FlagManualInput();
			return;
		case 4://Mass Flag Editor
			FlagMassEditor();
			return;
		case 5://Cancel
			return;
	}
	
}

void FlagManualInput()
{
	int id = SelectNumber( 4 );
	int onOff = MSG_SELECT( MSGDummy, SelectOnOffCheck, 0 );
	switch (onOff) 
	{
		case 0: // On
			BIT_ON( id );
			return;
		case 1: // Off
			BIT_OFF( id );
			return;
		case 2: // Check
			if ( BIT_CHK( id ) )
			{
				DisplayMessagePrompt( FlagCheckOn );
			}
			else
			{
				DisplayMessagePrompt( FlagCheckOff );
			}
			return;
	}
}

void FlagMassEditor()
{
	int selection = MSG_SELECT( ModMenuName, FlagMassEditor, 0 );
	switch ( selection )
	{
		case 0://Disable all flags
			DisableAllBits();
			return;
		case 1://Enable all flags
			EnableAllBits();
			return;
		case 2://Swap enabled/disabled flags
			ToggleAllBits();
			return;
		case 3://Cancel
			return;
	}
}

void DisableAllBits() 
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		BIT_OFF( i ); 
	}
}

void EnableAllBits()
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		BIT_ON( i ); 
	}
}

void ToggleAllBits() 
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		if (BIT_CHK(i)) 
		{
			BIT_OFF(i);
		}
		else
		{
			BIT_ON(i);
		}
	}
}
