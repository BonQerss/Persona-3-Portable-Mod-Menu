//import flow files
import( "Utilities.flow" );
//import msg files
import( "ModMenu.msg" );
//global variables
global int gFieldMajor;
global int gFieldMinor;
global int gEventMajor;
global int gEventMinor;
global int unitId;

void ModMenuInit()
{
	int selection = MSG_SELECT( ModMenuName, ModMenu, 0 );
	switch ( selection )
	{
		case 0://Use original square function
			CallOriginalSquareMenu();
			return;
		case 1://Player
			PlayerEditorDisplay();
			return;
		case 2://Battle Select
			BattleSelect();
			return;
		case 3://Sound Test
			int bgmId = SelectNumberPrompt( SelectBgmDialog, 3 );
			BGM( bgmId );
			return;
		case 4://Field Select
			FieldSelect();
			return;
		case 5://Next Page
			ModMenuPage2();
			return;
		case 6://Cancel
			return;
	}
}

void ModMenuPage2()
{
	int selection = MSG_SELECT( ModMenuName, ModMenu2, 0 );
	switch ( selection )
	{
		case 0://Event Select
			EventSelect();
			return;
		case 1://Flags
			FlagsEditorDisplay();
			return;
		case 2://Font Test
			DisplayMessagePrompt( FontTest );
			return;
		case 3://About
			DisplayMessagePrompt( AboutMsg );
			return;
		case 4://Quick tests
			return;
		case 5://Previous Page
			ModMenuInit();
			return;
		case 6://Cancel
			return;
	}
}

void PlayerEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, PlayerMenu, 0 );
	switch ( selection )
	{
		case 0://Personas
			PersonaEditorOpen();
			return;
		case 1://Social Stats
			StatEditorDisplay();
			return;
		case 2://Items
			ItemEditorDisplay();
			return;
		case 3://Set Social Link Rank
			CommuSetRankSelect();
			return;
		case 4://Party Edit
			PartyEditorDisplay();
			return;
		case 5://Max Money
			ADD_PC_MONEY( 99999999 );
			DisplayMessagePrompt( MoneyAdded );
			return;
		case 6://Cancel
			return;
	}
}

void PersonaEditorOpen()
{
	int selection = MSG_SELECT( ModMenuName, PersonaMenu, 0 );
	switch ( selection )
	{
		case 0://Add Persona
			PersonaAddSelect();
			return;
		case 1://Delete Personas
			DisplayMessagePrompt( NotImplemented );
			return;
		case 2://Add Skill
			PersonaAddSkillSelect();
			return;
		case 3://Unlock Full Compendium
			DisplayMessagePrompt( NotImplemented );
			return;
		case 4://Evolve Persona
			int unit = SelectUnitNoProtag();
			PERSONA_EVOLUTION( unit );
			return;
		case 5://Cancel
			return;
	}
}

void PersonaAddSelect()
{
	//int personaId;
	//personaId = SelectNumberPrompt( PersonaAddPrompt, 3 ); 
	//	if ( personaId == -1 )
	//		return;
	//ADD_PERSONA_STOCK( personaId );
	//DisplayMessagePrompt( PersonaAdded );
	DisplayMessagePrompt( NotImplemented );
}

void PersonaAddSkillSelect()
{
	/*unitId = MSG_SELECT( ModMenuName, UnitSelect, 0 );
	int skillId = 0;
	skillId = SelectNumberPrompt( SkillPrompt, 3 );
	SKILL_ADD( ( unitId + 1 ), skillId );*/
	DisplayMessagePrompt( NotImplemented );
}

void StatEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, StatsMenu, 0 );
	int pointsToAdd = 0;
	switch ( selection )
	{
		case 0: // Academics
			pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
			ADD_PC_STAT( 0, pointsToAdd );
			return;
		case 1: // Charm
			pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
			ADD_PC_STAT( 1, pointsToAdd );
			return;
		case 2: // Courage
			pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
			ADD_PC_STAT( 2, pointsToAdd );
			return;
		case 3: // Cancel
			return;
	}
}

void ItemEditorDisplay()
{
	int itemType = MSG_SELECT( ModMenuName, ItemMenu, 0 );
	switch ( itemType ) 
	{
		case 0: // Melee Weapons
			ItemGetSelect( 0 );
			return;
		case 1: // Armor
			ItemGetSelect( 0x100 );
			return;
		case 2: // Boots
			ItemGetSelect( 0x200 );
			return;
		case 3: // Accessories
			ItemGetSelect( 0x300 );
			return;
		case 4: // Items
			ItemGetSelect( 0x400 );
			return;
		case 5: // Key Items
			ItemGetSelect( 0x500 );
			return;
		case 6: // Cancel
			return;
	}
}

void ItemGetSelect( int type )
{
	int itemId = SelectNumberPrompt( ItemPrompt, 4 );
	int amount = SelectNumberPrompt( ItemPrompt2, 2 );
}

void CommuSetRankSelect()
{
	int selection = MSG_SELECT( CommuDesc, CommuCharSel1, 0 );
	int lvl = 0;
	switch (selection)
	{
		case 0: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 1, lvl, 9999 ); return;
		case 1: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 2, lvl, 9999 ); return;
		case 2: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 3, lvl, 9999 ); return;
		case 3: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 4, lvl, 9999 ); return;
		case 4: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 5, lvl, 9999 ); return;
		case 5: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 6, lvl, 9999 ); return;
		case 6: CommuSetRankSelect2(); return;

	}
}

void CommuSetRankSelect2()
{
	int selection = MSG_SELECT( CommuDesc, CommuCharSel2, 0 );
	int lvl = 0;
	switch (selection)
	{
		case 0: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 7, lvl, 9999 ); return;
		case 1: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 8, lvl, 9999 ); return;
		case 2: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 9, lvl, 9999 ); return;
		case 3: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 10, lvl, 9999 ); return;
		case 4: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 11, lvl, 9999 ); return;
		case 5: CommuSetRankSelect(); return;
		case 6: CommuSetRankSelect3(); return;

	}
}

void CommuSetRankSelect3()
{
	int selection = MSG_SELECT( CommuDesc, CommuCharSel3, 0 );
	int lvl = 0;
	switch (selection)
	{
		case 0: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 12, lvl, 9999 ); return;
		case 1: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 13, lvl, 9999 ); return;
		case 2: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 14, lvl, 9999 ); return;
		case 3: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 15, lvl, 9999 ); return;
		case 4: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 16, lvl, 9999 ); return;
		case 5: CommuSetRankSelect2(); return;
		case 6: CommuSetRankSelect4(); return;

	}
}

void CommuSetRankSelect4()
{
	int selection = MSG_SELECT( CommuDesc, CommuCharSel4, 0 );
	int lvl = 0;
	switch (selection)
	{
		case 0: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 17, lvl, 9999 ); return;
		case 1: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 18, lvl, 9999 ); return;
		case 2: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 19, lvl, 9999 ); return;
		case 3: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 20, lvl, 9999 ); return;
		case 4: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 21, lvl, 9999 ); return;
		case 5: CommuSetRankSelect3(); return;
		case 6: CommuSetRankSelect5(); return;

	}
}

void CommuSetRankSelect5()
{
	int selection = MSG_SELECT( CommuDesc, CommuCharSel5, 0 );
	int lvl = 0;
	switch (selection)
	{
		case 0: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 22, lvl, 9999 ); return;
		case 1: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 23, lvl, 9999 ); return;
		case 2: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 24, lvl, 9999 ); return;
		case 3: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 25, lvl, 9999 ); return;
		case 4: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 26, lvl, 9999 ); return;
		case 5: lvl = Select10NumberPrompt( CommuPrompt ); CMM_SET_LV( 27, lvl, 9999 ); return;
		case 6: CommuSetRankSelect4(); return;

	}
}

void PartyEditorDisplay()
{
	int unit = 0;
	int selection = MSG_SELECT( ModMenuName, PartyEditMenu, 0 );
	switch ( selection )
	{
		case 0://Add Party Members
			unit = SelectUnitNoProtagNoFuuka();
			PARTY_IN( unit );
			PartyEditorDisplay();
			return;
		case 1://Remove Party Members
			unit = SelectUnitNoProtagNoFuuka();
			PARTY_OUT( unit );
			PartyEditorDisplay();
			return;
		case 2://Cancel
			return;
	}
}

void BattleSelect()
{
	int selection = MSG_SELECT( ModMenuName, BattleTypeMenu, 0 );
	switch ( selection )
	{
		case 0://Regular Encounter
			int Encounter = SelectNumberPrompt( EncounterPrompt, 3 );
			CALL_BATTLE( Encounter );
			return;
		case 1://Cancel
			return;
	}
}

void FieldSelect()
{
	int selection = MSG_SELECT( ModMenuName, FieldSelect, 0 );
	switch ( selection )
	{
		case 0://Enter Field ID
			FieldSelectIds();
			return;
		case 1://Load Field ID
			FieldLoadSelected();
			return;
		case 2://Cancel
			return;
	}
}

void FieldSelectIds()
{
	int temp = SelectNumberPrompt( FieldDlg, 3 );
	if ( temp == -1 )
		return;
	gFieldMajor = temp;
	
	temp = SelectNumberPrompt( FieldDlg2, 3 );
	if ( temp == -1 )
		return;
	gFieldMinor = temp;
	FieldSelect();
}

void FieldLoadSelected()
{
	if (gFieldMajor == 0 && gFieldMinor == 0)
		DisplayMessagePrompt( LoadCheckError );
	else
		CALL_FIELD( gFieldMajor, gFieldMinor, 0, 0  );
}

void EventSelect()
{
	int selection = MSG_SELECT( ModMenuName, EventSelect, 0 );
	switch ( selection )
	{
		case 0://Enter Event ID
			EventSelectIds();
			return;
		case 1://Load Event ID
			EventLoadSelected();
			return;
		case 2://Cancel
			return;
	}
}

void EventSelectIds()
{
	int temp = SelectNumberPrompt( EventDlg, 3 );
	if ( temp == -1 )
		return;
	gEventMajor = temp;
	
	temp = SelectNumberPrompt( EventDlg2, 3 );
	if ( temp == -1 )
		return;
		
	gEventMinor = temp;
	EventSelect();
}

void EventLoadSelected()
{
	if ( gEventMajor == 0 && gEventMinor == 0 )
	{
		DisplayMessagePrompt(LoadCheckError);
		return;
	}
	FADE( 3, 20 );
	CALL_EVENT( gEventMajor, gEventMinor );
	return;
}

void FlagsEditorDisplay()
{
	int selection = MSG_SELECT( ModMenuName, FlagMenu, 0 );
	switch ( selection )
	{
		case 0://Add Party Members
			DisplayMessagePrompt( NotImplemented );
			return;
		case 1://Remove Party Members
			DisplayMessagePrompt( NotImplemented );
			return;
		case 2://Manual Input
			FlagManualInput();
			return;
		case 3://Mass Flag Editor
			FlagMassEditor();
			return;
		case 4://Cancel
			return;
	}
	
}

void FlagManualInput()
{
	int id = SelectNumber( 4 );
	int onOff = MSG_SELECT( MSGDummy, SelectOnOffCheck, 0 );
	switch (onOff) 
	{
		case 0: // On
			BIT_ON( id );
			return;
		case 1: // Off
			BIT_OFF( id );
			return;
		case 2: // Check
			if ( BIT_CHK( id ) )
			{
				DisplayMessagePrompt( FlagCheckOn );
			}
			else
			{
				DisplayMessagePrompt( FlagCheckOff );
			}
			return;
	}
}

void FlagMassEditor()
{
	int selection = MSG_SELECT( ModMenuName, FlagMassEditor, 0 );
	switch ( selection )
	{
		case 0://Disable all flags
			DisableAllBits();
			return;
		case 1://Enable all flags
			EnableAllBits();
			return;
		case 2://Swap enabled/disabled flags
			ToggleAllBits();
			return;
		case 3://Cancel
			return;
	}
}

void DisableAllBits() 
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		BIT_OFF( i ); 
	}
}

void EnableAllBits()
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		BIT_ON( i ); 
	}
}

void ToggleAllBits() 
{
	for ( int i = 0; i < 0x13FF; i++ ) 
	{
		if (BIT_CHK(i)) 
		{
			BIT_OFF(i);
		}
		else
		{
			BIT_ON(i);
		}
	}
}
